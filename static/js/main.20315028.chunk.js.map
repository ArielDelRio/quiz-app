{"version":3,"sources":["Api.ts","utils.ts","components/question-card/QuestionCard.styles.ts","components/question-card/QuestionCard.tsx","assets/imgTitle.svg","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","animationIn","animationOut","animationInDuration","animationOutDuration","isVisible","src","img_title","alt","length","animationInDelay","type","color","width","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.20315028.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 40vw;\r\n  background: #f2f3d9;\r\n  border-radius: 10px;\r\n  border: 1.4px solid #030027;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  color: #030027;\r\n\r\n  p {\r\n    font-size: 1.3rem;\r\n    font-family: \"Times New Roman\", Times, serif;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    max-width: 70vw;\r\n\r\n    p {\r\n      font-size: 1.1rem;\r\n    }\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 1rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\r\n        : !correct && userClicked\r\n        ? \"linear-gradient(90deg, #ff5656, #c16868)\"\r\n        : \"linear-gradient(90deg, #5B54C2, #7408F0)\"};\r\n    border: 3px solid #fff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    max-width: 70vw;\r\n\r\n    button {\r\n      font-size: 0.8rem;\r\n      height: auto;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { Animated } from \"react-animated-css\";\r\n//types\r\nimport { AnswerObject } from \"../../App\";\r\n//styles\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard.styles\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {questionNr} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }}></p>\r\n    <div>\r\n      {answers.map((answer) => {\r\n        const correct = userAnswer?.correctAnswer === answer;\r\n        const userClicked = userAnswer?.answer === answer;\r\n        return (\r\n          <ButtonWrapper\r\n            key={answer}\r\n            correct={correct}\r\n            userClicked={userClicked}\r\n          >\r\n            <button\r\n              className={\r\n                userClicked\r\n                  ? correct\r\n                    ? \"animated tada\"\r\n                    : \"animated shake\"\r\n                  : \"\"\r\n              }\r\n              disabled={!!userAnswer}\r\n              value={answer}\r\n              onClick={callback}\r\n            >\r\n              <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n            </button>\r\n          </ButtonWrapper>\r\n        );\r\n      })}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","export default __webpack_public_path__ + \"static/media/imgTitle.33c0deea.svg\";","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100vh;\r\n    }\r\n\r\n    body {\r\n      background-color: #7408f0;\r\n      background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 2000 1500'%3E%3Cdefs%3E%3Crect stroke='%237408f0' stroke-width='.5' width='1' height='1' id='s'/%3E%3Cpattern id='a' width='3' height='3' patternUnits='userSpaceOnUse' patternTransform='scale(50) translate(-980 -735)'%3E%3Cuse fill='%23770df0' href='%23s' y='2'/%3E%3Cuse fill='%23770df0' href='%23s' x='1' y='2'/%3E%3Cuse fill='%237a12f1' href='%23s' x='2' y='2'/%3E%3Cuse fill='%237a12f1' href='%23s'/%3E%3Cuse fill='%237c17f1' href='%23s' x='2'/%3E%3Cuse fill='%237c17f1' href='%23s' x='1' y='1'/%3E%3C/pattern%3E%3Cpattern id='b' width='7' height='11' patternUnits='userSpaceOnUse' patternTransform='scale(50) translate(-980 -735)'%3E%3Cg fill='%237f1cf1'%3E%3Cuse href='%23s'/%3E%3Cuse href='%23s' y='5' /%3E%3Cuse href='%23s' x='1' y='10'/%3E%3Cuse href='%23s' x='2' y='1'/%3E%3Cuse href='%23s' x='2' y='4'/%3E%3Cuse href='%23s' x='3' y='8'/%3E%3Cuse href='%23s' x='4' y='3'/%3E%3Cuse href='%23s' x='4' y='7'/%3E%3Cuse href='%23s' x='5' y='2'/%3E%3Cuse href='%23s' x='5' y='6'/%3E%3Cuse href='%23s' x='6' y='9'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='h' width='5' height='13' patternUnits='userSpaceOnUse' patternTransform='scale(50) translate(-980 -735)'%3E%3Cg fill='%237f1cf1'%3E%3Cuse href='%23s' y='5'/%3E%3Cuse href='%23s' y='8'/%3E%3Cuse href='%23s' x='1' y='1'/%3E%3Cuse href='%23s' x='1' y='9'/%3E%3Cuse href='%23s' x='1' y='12'/%3E%3Cuse href='%23s' x='2'/%3E%3Cuse href='%23s' x='2' y='4'/%3E%3Cuse href='%23s' x='3' y='2'/%3E%3Cuse href='%23s' x='3' y='6'/%3E%3Cuse href='%23s' x='3' y='11'/%3E%3Cuse href='%23s' x='4' y='3'/%3E%3Cuse href='%23s' x='4' y='7'/%3E%3Cuse href='%23s' x='4' y='10'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='c' width='17' height='13' patternUnits='userSpaceOnUse' patternTransform='scale(50) translate(-980 -735)'%3E%3Cg fill='%238221f2'%3E%3Cuse href='%23s' y='11'/%3E%3Cuse href='%23s' x='2' y='9'/%3E%3Cuse href='%23s' x='5' y='12'/%3E%3Cuse href='%23s' x='9' y='4'/%3E%3Cuse href='%23s' x='12' y='1'/%3E%3Cuse href='%23s' x='16' y='6'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='d' width='19' height='17' patternUnits='userSpaceOnUse' patternTransform='scale(50) translate(-980 -735)'%3E%3Cg fill='%237408f0'%3E%3Cuse href='%23s' y='9'/%3E%3Cuse href='%23s' x='16' y='5'/%3E%3Cuse href='%23s' x='14' y='2'/%3E%3Cuse href='%23s' x='11' y='11'/%3E%3Cuse href='%23s' x='6' y='14'/%3E%3C/g%3E%3Cg fill='%238526f2'%3E%3Cuse href='%23s' x='3' y='13'/%3E%3Cuse href='%23s' x='9' y='7'/%3E%3Cuse href='%23s' x='13' y='10'/%3E%3Cuse href='%23s' x='15' y='4'/%3E%3Cuse href='%23s' x='18' y='1'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='e' width='47' height='53' patternUnits='userSpaceOnUse' patternTransform='scale(50) translate(-980 -735)'%3E%3Cg fill='%235b54c2'%3E%3Cuse href='%23s' x='2' y='5'/%3E%3Cuse href='%23s' x='16' y='38'/%3E%3Cuse href='%23s' x='46' y='42'/%3E%3Cuse href='%23s' x='29' y='20'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='f' width='59' height='71' patternUnits='userSpaceOnUse' patternTransform='scale(50) translate(-980 -735)'%3E%3Cg fill='%235b54c2'%3E%3Cuse href='%23s' x='33' y='13'/%3E%3Cuse href='%23s' x='27' y='54'/%3E%3Cuse href='%23s' x='55' y='55'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='g' width='139' height='97' patternUnits='userSpaceOnUse' patternTransform='scale(50) translate(-980 -735)'%3E%3Cg fill='%235b54c2'%3E%3Cuse href='%23s' x='11' y='8'/%3E%3Cuse href='%23s' x='51' y='13'/%3E%3Cuse href='%23s' x='17' y='73'/%3E%3Cuse href='%23s' x='99' y='57'/%3E%3C/g%3E%3C/pattern%3E%3C/defs%3E%3Crect fill='url(%23a)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23b)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23h)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23c)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23d)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23e)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23f)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23g)' width='100%25' height='100%25'/%3E%3C/svg%3E\");\r\n        background-attachment: fixed;\r\n        background-size: cover;\r\n\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: \"Catamaran\" sans-serif;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding-bottom: 20vh;\r\n\r\n  > p {\r\n    color: #000;\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  .score {\r\n    color: #f2f3d9;\r\n    font-family: monospace;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n    margin-bottom: 10px;\r\n    text-align: center;\r\n  }\r\n\r\n  .title {\r\n    margin-left: 8em;\r\n  }\r\n\r\n  h1 {\r\n    display: inline-block;\r\n    font-family: Fascinate Impact, Haettenschweiler, \"Arial Narrow Bold\",\r\n      sans-serif;\r\n    background: #f2f3d9;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    filter: drop-shadow(2px 2px #030027);\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .img_title {\r\n    width: 8em;\r\n    height: 100px;\r\n    margin-bottom: -0.5em;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: #f4562a;\r\n    border: 2px solid #f2f3d9;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n    font-family: monospace;\r\n    font-size: x-large;\r\n    transition: transform 0.2s;\r\n\r\n    :hover {\r\n      background: #f2f3d9;\r\n      border: 2px solid #030027;\r\n      transform: scale(1.3);\r\n    }\r\n  }\r\n\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    p {\r\n      font-size: 1.2rem;\r\n    }\r\n\r\n    .score {\r\n      height: 30px;\r\n      font-size: 1.5rem;\r\n    }\r\n\r\n    h1 {\r\n      font-size: 55px;\r\n    }\r\n\r\n    .title {\r\n      /* margin: auto; */\r\n      text-align: center;\r\n    }\r\n    .img_title {\r\n      width: 6em;\r\n      height: 100px;\r\n      margin-bottom: -1em;\r\n    }\r\n\r\n    .start,\r\n    .next {\r\n      min-height: 2em;\r\n    }\r\n  }\r\n\r\n  @media (max-width: 480px) {\r\n    .title {\r\n      padding-top: 5em;\r\n      margin: auto;\r\n    }\r\n  }\r\n`;\r\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./Api\";\nimport { Animated } from \"react-animated-css\";\nimport ReactLoading from \"react-loading\";\n// Components\nimport QuestionCard from \"./components/question-card/QuestionCard\";\n// Images\nimport img_title from \"./assets/imgTitle.svg\";\n\n//types\nimport { QuestionState, Difficulty } from \"./Api\";\n//styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // users answer\n      const answer = e.currentTarget.value;\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // save answer in the array for users answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // move on the next question if not the last question\n    const nextQuestion = number + 1;\n\n    nextQuestion === TOTAL_QUESTIONS\n      ? setGameOver(true)\n      : setNumber(nextQuestion);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <Animated\n          animationIn=\"zoomIn\"\n          animationOut=\"zoomOutDown\"\n          animationInDuration={1000}\n          animationOutDuration={1000}\n          isVisible={true}\n        >\n          <div className=\"title\">\n            <h1>React Quiz</h1>\n            <img className=\"img_title\" src={img_title} alt=\"img title\" />\n          </div>\n        </Animated>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <Animated\n            animationIn=\"bounceIn\"\n            animationOut=\"zoomOutDown\"\n            animationInDuration={600}\n            animationOutDuration={1000}\n            isVisible={true}\n            animationInDelay={1000}\n          >\n            <button className=\"start\" onClick={startTrivia}>\n              Start\n            </button>\n          </Animated>\n        ) : null}\n\n        {loading && <ReactLoading type=\"balls\" color=\"#F2F3D9\" width=\"6em\" />}\n        {!loading && !gameOver && (\n          <div>\n            <p className=\"score\">Score: {score}</p>\n            <QuestionCard\n              questionNr={number + 1}\n              totalQuestions={TOTAL_QUESTIONS}\n              question={questions[number].question}\n              answers={questions[number].answers}\n              userAnswer={userAnswers ? userAnswers[number] : undefined}\n              callback={checkAnswer}\n            />\n          </div>\n        )}\n        {!gameOver &&\n          !loading &&\n          userAnswers.length === number + 1 &&\n          number !== TOTAL_QUESTIONS - 1 && (\n            <button className=\"next\" onClick={nextQuestion}>\n              Next Question\n            </button>\n          )}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}