{"version":3,"sources":["Api.ts","utils.ts","components/question-card/QuestionCard.styles.ts","components/question-card/QuestionCard.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52e36079.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport const fetchQuizQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) =>\r\n  [...array].sort(() => Math.random() - 0.5);\r\n","import styled  from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 40vw;\r\n    background: #ebfeff;\r\n    border-radius: 10px;\r\n    border: 1.4px solid #d38558;\r\n    padding: 20px;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    text-align: center;\r\n\r\n    p {\r\n        font-size: 1.3rem;\r\n        font-family: 'Times New Roman', Times, serif;\r\n    }\r\n\r\n\r\n    @media (max-width: 768px) {\r\n        max-width: 70vw;\r\n\r\n        p {\r\n        font-size: 1.1rem;\r\n\r\n        }\r\n    }\r\n`\r\n\r\ntype ButtonWrapperProps = {\r\n    correct: boolean;\r\n    userClicked: boolean;\r\n}\r\n\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 1rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({correct, userClicked}) =>\r\n            correct\r\n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\r\n                : !correct && userClicked\r\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\r\n                : 'linear-gradient(90deg, #429DC4, #598D91)'};\r\n        border: 3px solid #fff;\r\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n        border-radius: 10px;\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n\r\n    }\r\n\r\n\r\n    @media (max-width: 768px) {\r\n        max-width: 70vw;\r\n\r\n        button {\r\n            font-size: .8rem;\r\n            height:auto;\r\n        }\r\n    }\r\n\r\n`","import React from \"react\";\r\n//types\r\nimport { AnswerObject } from \"../../App\";\r\n//styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nconst QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => (\r\n  <Wrapper>\r\n    <p className=\"number\">\r\n      Question: {questionNr} / {totalQuestions}\r\n    </p>\r\n    <p dangerouslySetInnerHTML={{ __html: question }}></p>\r\n    <div>\r\n      {answers.map((answer) => (\r\n        <ButtonWrapper \r\n          key={answer}\r\n          correct={userAnswer?.correctAnswer === answer}\r\n          userClicked={userAnswer?.answer === answer}\r\n        >\r\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\r\n            <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n          </button>\r\n        </ButtonWrapper>\r\n      ))}\r\n    </div>\r\n  </Wrapper>\r\n);\r\n\r\nexport default QuestionCard;\r\n","import styled, { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100vh;\r\n    }\r\n\r\n    body {\r\n        background-color: #ffffff;\r\n        background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 2000 1500'%3E%3Cdefs%3E%3Crect stroke='%23ffffff' stroke-width='0.16' width='1' height='1' id='s'/%3E%3Cpattern id='a' width='3' height='3' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cuse fill='%23fafafa' href='%23s' y='2'/%3E%3Cuse fill='%23fafafa' href='%23s' x='1' y='2'/%3E%3Cuse fill='%23f5f5f5' href='%23s' x='2' y='2'/%3E%3Cuse fill='%23f5f5f5' href='%23s'/%3E%3Cuse fill='%23f0f0f0' href='%23s' x='2'/%3E%3Cuse fill='%23f0f0f0' href='%23s' x='1' y='1'/%3E%3C/pattern%3E%3Cpattern id='b' width='7' height='11' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23ebebeb'%3E%3Cuse href='%23s'/%3E%3Cuse href='%23s' y='5' /%3E%3Cuse href='%23s' x='1' y='10'/%3E%3Cuse href='%23s' x='2' y='1'/%3E%3Cuse href='%23s' x='2' y='4'/%3E%3Cuse href='%23s' x='3' y='8'/%3E%3Cuse href='%23s' x='4' y='3'/%3E%3Cuse href='%23s' x='4' y='7'/%3E%3Cuse href='%23s' x='5' y='2'/%3E%3Cuse href='%23s' x='5' y='6'/%3E%3Cuse href='%23s' x='6' y='9'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='h' width='5' height='13' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23ebebeb'%3E%3Cuse href='%23s' y='5'/%3E%3Cuse href='%23s' y='8'/%3E%3Cuse href='%23s' x='1' y='1'/%3E%3Cuse href='%23s' x='1' y='9'/%3E%3Cuse href='%23s' x='1' y='12'/%3E%3Cuse href='%23s' x='2'/%3E%3Cuse href='%23s' x='2' y='4'/%3E%3Cuse href='%23s' x='3' y='2'/%3E%3Cuse href='%23s' x='3' y='6'/%3E%3Cuse href='%23s' x='3' y='11'/%3E%3Cuse href='%23s' x='4' y='3'/%3E%3Cuse href='%23s' x='4' y='7'/%3E%3Cuse href='%23s' x='4' y='10'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='c' width='17' height='13' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23e5e5e5'%3E%3Cuse href='%23s' y='11'/%3E%3Cuse href='%23s' x='2' y='9'/%3E%3Cuse href='%23s' x='5' y='12'/%3E%3Cuse href='%23s' x='9' y='4'/%3E%3Cuse href='%23s' x='12' y='1'/%3E%3Cuse href='%23s' x='16' y='6'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='d' width='19' height='17' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23ffffff'%3E%3Cuse href='%23s' y='9'/%3E%3Cuse href='%23s' x='16' y='5'/%3E%3Cuse href='%23s' x='14' y='2'/%3E%3Cuse href='%23s' x='11' y='11'/%3E%3Cuse href='%23s' x='6' y='14'/%3E%3C/g%3E%3Cg fill='%23e0e0e0'%3E%3Cuse href='%23s' x='3' y='13'/%3E%3Cuse href='%23s' x='9' y='7'/%3E%3Cuse href='%23s' x='13' y='10'/%3E%3Cuse href='%23s' x='15' y='4'/%3E%3Cuse href='%23s' x='18' y='1'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='e' width='47' height='53' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23F60'%3E%3Cuse href='%23s' x='2' y='5'/%3E%3Cuse href='%23s' x='16' y='38'/%3E%3Cuse href='%23s' x='46' y='42'/%3E%3Cuse href='%23s' x='29' y='20'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='f' width='59' height='71' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23F60'%3E%3Cuse href='%23s' x='33' y='13'/%3E%3Cuse href='%23s' x='27' y='54'/%3E%3Cuse href='%23s' x='55' y='55'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='g' width='139' height='97' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23F60'%3E%3Cuse href='%23s' x='11' y='8'/%3E%3Cuse href='%23s' x='51' y='13'/%3E%3Cuse href='%23s' x='17' y='73'/%3E%3Cuse href='%23s' x='99' y='57'/%3E%3C/g%3E%3C/pattern%3E%3C/defs%3E%3Crect fill='url(%23a)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23b)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23h)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23c)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23d)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23e)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23f)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23g)' width='100%25' height='100%25'/%3E%3C/svg%3E\");\r\n        background-attachment: fixed;\r\n        background-size: cover;\r\n\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: \"Catamaran\" sans-serif;\r\n    }\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n\r\n  > p {\r\n    color: #000;\r\n    font-size: 1.5rem;\r\n  }\r\n\r\n  .score {\r\n    color: #000;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  h1 {\r\n    font-family: Fascinate Impact, Haettenschweiler, \"Arial Narrow Bold\",\r\n      sans-serif;\r\n    background-image: linear-gradient(180deg, #fff, #ff6600);\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    font-weight: 400;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #fff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n\r\n  .start{\r\n      max-width: 200px;\r\n  }\r\n\r\n\r\n  @media (max-width: 768px) {\r\n\r\n    p {\r\n      font-size: 1.2rem\r\n    }\r\n\r\n    .score {\r\n      height: 30px;\r\n      font-size: 1.5rem;\r\n    }\r\n\r\n    h1 {\r\n      font-size: 50px;\r\n    }\r\n\r\n    .start,\r\n    .next {\r\n      height: 40px;\r\n      max-width: 140px;\r\n    }\r\n  }\r\n`;","import React, { useState } from \"react\";\r\nimport { fetchQuizQuestions } from \"./Api\";\r\n// Components\r\nimport QuestionCard from \"./components/question-card/QuestionCard\";\r\n//types\r\nimport { QuestionState, Difficulty } from \"./Api\";\r\n//styles\r\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\r\n\r\nexport type AnswerObject = {\r\n  question: string;\r\n  answer: string;\r\n  correct: boolean;\r\n  correctAnswer: string;\r\n};\r\n\r\nconst TOTAL_QUESTIONS = 10;\r\n\r\nconst App = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\r\n  const [number, setNumber] = useState(0);\r\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\r\n  const [score, setScore] = useState(0);\r\n  const [gameOver, setGameOver] = useState(true);\r\n\r\n  const startTrivia = async () => {\r\n    setLoading(true);\r\n    setGameOver(false);\r\n\r\n    const newQuestions = await fetchQuizQuestions(\r\n      TOTAL_QUESTIONS,\r\n      Difficulty.EASY\r\n    );\r\n\r\n    setQuestions(newQuestions);\r\n    setScore(0);\r\n    setUserAnswers([]);\r\n    setNumber(0);\r\n    setLoading(false);\r\n  };\r\n\r\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n    if (!gameOver) {\r\n      // users answer\r\n      const answer = e.currentTarget.value;\r\n      // check answer against correct answer\r\n      const correct = questions[number].correct_answer === answer;\r\n      // add score if answer is correct\r\n      if (correct) setScore((prev) => prev + 1);\r\n      // save answer in the array for users answers\r\n      const answerObject = {\r\n        question: questions[number].question,\r\n        answer,\r\n        correct,\r\n        correctAnswer: questions[number].correct_answer,\r\n      };\r\n      setUserAnswers((prev) => [...prev, answerObject]);\r\n    }\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    // move on the next question if not the last question\r\n    const nextQuestion = number + 1;\r\n\r\n    nextQuestion === TOTAL_QUESTIONS\r\n      ? setGameOver(true)\r\n      : setNumber(nextQuestion);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle/>\r\n      <Wrapper>\r\n        <h1>React Quiz</h1>\r\n\r\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\r\n          <button className=\"start\" onClick={startTrivia}>\r\n            Start\r\n          </button>\r\n        ) : null}\r\n\r\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\r\n        {loading && <p>Loading Question ...</p>}\r\n        {!loading && !gameOver && (\r\n          <QuestionCard\r\n            questionNr={number + 1}\r\n            totalQuestions={TOTAL_QUESTIONS}\r\n            question={questions[number].question}\r\n            answers={questions[number].answers}\r\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\r\n            callback={checkAnswer}\r\n          />\r\n        )}\r\n        {!gameOver &&\r\n        !loading &&\r\n        userAnswers.length === number + 1 &&\r\n        number !== TOTAL_QUESTIONS - 1 ? (\r\n          <button className=\"next\" onClick={nextQuestion}>\r\n            Next Question\r\n          </button>\r\n        ) : null}\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}