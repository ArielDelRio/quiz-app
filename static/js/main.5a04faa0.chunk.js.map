{"version":3,"sources":["Api.ts","utils.ts","components/question-card/QuestionCard.styles.ts","components/question-card/QuestionCard.tsx","components/loading/Loading.tsx","App.styles.ts","App.tsx","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","Example","type","color","GlobalStyle","createGlobalStyle","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startTrivia","EASY","newQuestions","length","Loading","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5a04faa0.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport const fetchQuizQuestions = async (\n  amount: number,\n  difficulty: Difficulty\n) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([\n      ...question.incorrect_answers,\n      question.correct_answer,\n    ]),\n  }));\n};\n","export const shuffleArray = (array: any[]) =>\n  [...array].sort(() => Math.random() - 0.5);\n","import styled  from 'styled-components';\n\nexport const Wrapper = styled.div`\n    max-width: 40vw;\n    background: #ebfeff;\n    border-radius: 10px;\n    border: 1.4px solid #d38558;\n    padding: 20px;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    text-align: center;\n\n    p {\n        font-size: 1.3rem;\n        font-family: 'Times New Roman', Times, serif;\n    }\n\n\n    @media (max-width: 768px) {\n        max-width: 70vw;\n\n        p {\n        font-size: 1.1rem;\n\n        }\n    }\n`\n\ntype ButtonWrapperProps = {\n    correct: boolean;\n    userClicked: boolean;\n}\n\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n    transition: all 0.3s ease;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    button {\n        cursor: pointer;\n        user-select: none;\n        font-size: 1rem;\n        width: 100%;\n        height: 40px;\n        margin: 5px 0;\n        background: ${({correct, userClicked}) =>\n            correct\n                ? 'linear-gradient(90deg, #56ffa4, #59bc86)'\n                : !correct && userClicked\n                ? 'linear-gradient(90deg, #ff5656, #c16868)'\n                : 'linear-gradient(90deg, #429DC4, #598D91)'};\n        border: 3px solid #fff;\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n        border-radius: 10px;\n        color: #fff;\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n\n    }\n\n\n    @media (max-width: 768px) {\n        max-width: 70vw;\n\n        button {\n            font-size: .8rem;\n            height:auto;\n        }\n    }\n\n`","import React from \"react\";\n//types\nimport { AnswerObject } from \"../../App\";\n//styles\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles';\n\ntype Props = {\n  question: string;\n  answers: string[];\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n  userAnswer: AnswerObject | undefined;\n  questionNr: number;\n  totalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n  question,\n  answers,\n  callback,\n  userAnswer,\n  questionNr,\n  totalQuestions,\n}) => (\n  <Wrapper>\n    <p className=\"number\">\n      Question: {questionNr} / {totalQuestions}\n    </p>\n    <p dangerouslySetInnerHTML={{ __html: question }}></p>\n    <div>\n      {answers.map((answer) => (\n        <ButtonWrapper \n          key={answer}\n          correct={userAnswer?.correctAnswer === answer}\n          userClicked={userAnswer?.answer === answer}\n        >\n          <button disabled={!!userAnswer} value={answer} onClick={callback}>\n            <span dangerouslySetInnerHTML={{ __html: answer }}></span>\n          </button>\n        </ButtonWrapper>\n      ))}\n    </div>\n  </Wrapper>\n);\n\nexport default QuestionCard;\n","import React from 'react';\r\nimport ReactLoading, {LoadingType} from 'react-loading';\r\n\r\ntype Props = {\r\n    type: LoadingType;\r\n    color: string;\r\n  };\r\n\r\nconst Example : React.FC<Props> = ({ type, color }) => (\r\n    <ReactLoading type={type} color={color} />\r\n);\r\n\r\nexport default Example;","import styled, { createGlobalStyle } from \"styled-components\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100vh;\n    }\n\n    body {\n        background-color: #ffffff;\n        background-image: url(\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 2000 1500'%3E%3Cdefs%3E%3Crect stroke='%23ffffff' stroke-width='0.16' width='1' height='1' id='s'/%3E%3Cpattern id='a' width='3' height='3' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cuse fill='%23fafafa' href='%23s' y='2'/%3E%3Cuse fill='%23fafafa' href='%23s' x='1' y='2'/%3E%3Cuse fill='%23f5f5f5' href='%23s' x='2' y='2'/%3E%3Cuse fill='%23f5f5f5' href='%23s'/%3E%3Cuse fill='%23f0f0f0' href='%23s' x='2'/%3E%3Cuse fill='%23f0f0f0' href='%23s' x='1' y='1'/%3E%3C/pattern%3E%3Cpattern id='b' width='7' height='11' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23ebebeb'%3E%3Cuse href='%23s'/%3E%3Cuse href='%23s' y='5' /%3E%3Cuse href='%23s' x='1' y='10'/%3E%3Cuse href='%23s' x='2' y='1'/%3E%3Cuse href='%23s' x='2' y='4'/%3E%3Cuse href='%23s' x='3' y='8'/%3E%3Cuse href='%23s' x='4' y='3'/%3E%3Cuse href='%23s' x='4' y='7'/%3E%3Cuse href='%23s' x='5' y='2'/%3E%3Cuse href='%23s' x='5' y='6'/%3E%3Cuse href='%23s' x='6' y='9'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='h' width='5' height='13' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23ebebeb'%3E%3Cuse href='%23s' y='5'/%3E%3Cuse href='%23s' y='8'/%3E%3Cuse href='%23s' x='1' y='1'/%3E%3Cuse href='%23s' x='1' y='9'/%3E%3Cuse href='%23s' x='1' y='12'/%3E%3Cuse href='%23s' x='2'/%3E%3Cuse href='%23s' x='2' y='4'/%3E%3Cuse href='%23s' x='3' y='2'/%3E%3Cuse href='%23s' x='3' y='6'/%3E%3Cuse href='%23s' x='3' y='11'/%3E%3Cuse href='%23s' x='4' y='3'/%3E%3Cuse href='%23s' x='4' y='7'/%3E%3Cuse href='%23s' x='4' y='10'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='c' width='17' height='13' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23e5e5e5'%3E%3Cuse href='%23s' y='11'/%3E%3Cuse href='%23s' x='2' y='9'/%3E%3Cuse href='%23s' x='5' y='12'/%3E%3Cuse href='%23s' x='9' y='4'/%3E%3Cuse href='%23s' x='12' y='1'/%3E%3Cuse href='%23s' x='16' y='6'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='d' width='19' height='17' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23ffffff'%3E%3Cuse href='%23s' y='9'/%3E%3Cuse href='%23s' x='16' y='5'/%3E%3Cuse href='%23s' x='14' y='2'/%3E%3Cuse href='%23s' x='11' y='11'/%3E%3Cuse href='%23s' x='6' y='14'/%3E%3C/g%3E%3Cg fill='%23e0e0e0'%3E%3Cuse href='%23s' x='3' y='13'/%3E%3Cuse href='%23s' x='9' y='7'/%3E%3Cuse href='%23s' x='13' y='10'/%3E%3Cuse href='%23s' x='15' y='4'/%3E%3Cuse href='%23s' x='18' y='1'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='e' width='47' height='53' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23F60'%3E%3Cuse href='%23s' x='2' y='5'/%3E%3Cuse href='%23s' x='16' y='38'/%3E%3Cuse href='%23s' x='46' y='42'/%3E%3Cuse href='%23s' x='29' y='20'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='f' width='59' height='71' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23F60'%3E%3Cuse href='%23s' x='33' y='13'/%3E%3Cuse href='%23s' x='27' y='54'/%3E%3Cuse href='%23s' x='55' y='55'/%3E%3C/g%3E%3C/pattern%3E%3Cpattern id='g' width='139' height='97' patternUnits='userSpaceOnUse' patternTransform='rotate(108 1000 750) scale(25.15) translate(-960.24 -720.18)'%3E%3Cg fill='%23F60'%3E%3Cuse href='%23s' x='11' y='8'/%3E%3Cuse href='%23s' x='51' y='13'/%3E%3Cuse href='%23s' x='17' y='73'/%3E%3Cuse href='%23s' x='99' y='57'/%3E%3C/g%3E%3C/pattern%3E%3C/defs%3E%3Crect fill='url(%23a)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23b)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23h)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23c)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23d)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23e)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23f)' width='100%25' height='100%25'/%3E%3Crect fill='url(%23g)' width='100%25' height='100%25'/%3E%3C/svg%3E\");\n        background-attachment: fixed;\n        background-size: cover;\n\n        margin: 0;\n        padding: 0 20px;\n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: \"Catamaran\" sans-serif;\n    }\n`\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  > p {\n    color: #000;\n    font-size: 1.5rem;\n  }\n\n  .score {\n    color: #000;\n    font-size: 2rem;\n    margin: 0;\n    margin-bottom: 10px;\n  }\n\n  h1 {\n    font-family: Fascinate Impact, Haettenschweiler, \"Arial Narrow Bold\",\n      sans-serif;\n    background-image: linear-gradient(180deg, #fff, #ff6600);\n    background-size: 100%;\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    -moz-background-clip: text;\n    filter: drop-shadow(2px 2px #0085a3);\n    font-size: 70px;\n    font-weight: 400;\n    text-align: center;\n    margin: 20px;\n  }\n\n  .start,\n  .next {\n    cursor: pointer;\n    background: linear-gradient(180deg, #fff, #ffcc91);\n    border: 2px solid #d38558;\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n    border-radius: 10px;\n    height: 40px;\n    margin: 20px 0;\n    padding: 0 40px;\n  }\n\n  .start{\n      max-width: 200px;\n  }\n\n\n  @media (max-width: 768px) {\n\n    p {\n      font-size: 1.2rem\n    }\n\n    .score {\n      height: 30px;\n      font-size: 1.5rem;\n    }\n\n    h1 {\n      font-size: 50px;\n    }\n\n    .start,\n    .next {\n      height: 40px;\n      max-width: 140px;\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./Api\";\n// Components\nimport QuestionCard from \"./components/question-card/QuestionCard\";\nimport Loading from \"./components/loading/Loading\";\n//types\nimport { QuestionState, Difficulty } from \"./Api\";\n//styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  const startTrivia = async () => {\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(\n      TOTAL_QUESTIONS,\n      Difficulty.EASY\n    );\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // users answer\n      const answer = e.currentTarget.value;\n      // check answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // add score if answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // save answer in the array for users answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // move on the next question if not the last question\n    const nextQuestion = number + 1;\n\n    nextQuestion === TOTAL_QUESTIONS\n      ? setGameOver(true)\n      : setNumber(nextQuestion);\n  };\n\n  return (\n    <>\n      <GlobalStyle/>\n      <Wrapper>\n        <h1>React Quiz</h1>\n\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading && <Loading type=\"cubes\" color=\"#ff6600\"/>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}